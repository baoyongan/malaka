/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zcbl.malaka.rpc.common.inter;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RpcRequest
		implements org.apache.thrift.TBase<RpcRequest, RpcRequest._Fields>, java.io.Serializable, Cloneable
{
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"RpcRequest");

	private static final org.apache.thrift.protocol.TField PARAMTER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"paramter", org.apache.thrift.protocol.TType.MAP, (short) 1);
	private static final org.apache.thrift.protocol.TField SYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sys",
			org.apache.thrift.protocol.TType.MAP, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static
	{
		schemes.put(StandardScheme.class, new RpcRequestStandardSchemeFactory());
		schemes.put(TupleScheme.class, new RpcRequestTupleSchemeFactory());
	}

	public Map<String, String> paramter; // required
	public Map<String, String> sys; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum
	{
		PARAMTER((short) 1, "paramter"), SYS((short) 2, "sys");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static
		{
			for (_Fields field : EnumSet.allOf(_Fields.class))
			{
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId)
		{
			switch (fieldId)
			{
			case 1: // PARAMTER
				return PARAMTER;
			case 2: // SYS
				return SYS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId)
		{
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name)
		{
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName)
		{
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId()
		{
			return _thriftId;
		}

		public String getFieldName()
		{
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static
	{
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PARAMTER, new org.apache.thrift.meta_data.FieldMetaData("paramter",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.SYS, new org.apache.thrift.meta_data.FieldMetaData("sys",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcRequest.class, metaDataMap);
	}

	public RpcRequest()
	{
	}

	public RpcRequest(Map<String, String> paramter, Map<String, String> sys)
	{
		this();
		this.paramter = paramter;
		this.sys = sys;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public RpcRequest(RpcRequest other)
	{
		if (other.isSetParamter())
		{
			Map<String, String> __this__paramter = new HashMap<String, String>();
			for (Map.Entry<String, String> other_element : other.paramter.entrySet())
			{

				String other_element_key = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__paramter_copy_key = other_element_key;

				String __this__paramter_copy_value = other_element_value;

				__this__paramter.put(__this__paramter_copy_key, __this__paramter_copy_value);
			}
			this.paramter = __this__paramter;
		}
		if (other.isSetSys())
		{
			Map<String, String> __this__sys = new HashMap<String, String>();
			for (Map.Entry<String, String> other_element : other.sys.entrySet())
			{

				String other_element_key = other_element.getKey();
				String other_element_value = other_element.getValue();

				String __this__sys_copy_key = other_element_key;

				String __this__sys_copy_value = other_element_value;

				__this__sys.put(__this__sys_copy_key, __this__sys_copy_value);
			}
			this.sys = __this__sys;
		}
	}

	public RpcRequest deepCopy()
	{
		return new RpcRequest(this);
	}

	@Override
	public void clear()
	{
		this.paramter = null;
		this.sys = null;
	}

	public int getParamterSize()
	{
		return (this.paramter == null) ? 0 : this.paramter.size();
	}

	public void putToParamter(String key, String val)
	{
		if (this.paramter == null)
		{
			this.paramter = new HashMap<String, String>();
		}
		this.paramter.put(key, val);
	}

	public Map<String, String> getParamter()
	{
		return this.paramter;
	}

	public RpcRequest setParamter(Map<String, String> paramter)
	{
		this.paramter = paramter;
		return this;
	}

	public void unsetParamter()
	{
		this.paramter = null;
	}

	/**
	 * Returns true if field paramter is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetParamter()
	{
		return this.paramter != null;
	}

	public void setParamterIsSet(boolean value)
	{
		if (!value)
		{
			this.paramter = null;
		}
	}

	public int getSysSize()
	{
		return (this.sys == null) ? 0 : this.sys.size();
	}

	public void putToSys(String key, String val)
	{
		if (this.sys == null)
		{
			this.sys = new HashMap<String, String>();
		}
		this.sys.put(key, val);
	}

	public Map<String, String> getSys()
	{
		return this.sys;
	}

	public RpcRequest setSys(Map<String, String> sys)
	{
		this.sys = sys;
		return this;
	}

	public void unsetSys()
	{
		this.sys = null;
	}

	/**
	 * Returns true if field sys is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSys()
	{
		return this.sys != null;
	}

	public void setSysIsSet(boolean value)
	{
		if (!value)
		{
			this.sys = null;
		}
	}

	public void setFieldValue(_Fields field, Object value)
	{
		switch (field)
		{
		case PARAMTER:
			if (value == null)
			{
				unsetParamter();
			} else
			{
				setParamter((Map<String, String>) value);
			}
			break;

		case SYS:
			if (value == null)
			{
				unsetSys();
			} else
			{
				setSys((Map<String, String>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field)
	{
		switch (field)
		{
		case PARAMTER:
			return getParamter();

		case SYS:
			return getSys();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field)
	{
		if (field == null)
		{
			throw new IllegalArgumentException();
		}

		switch (field)
		{
		case PARAMTER:
			return isSetParamter();
		case SYS:
			return isSetSys();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that)
	{
		if (that == null)
			return false;
		if (that instanceof RpcRequest)
			return this.equals((RpcRequest) that);
		return false;
	}

	public boolean equals(RpcRequest that)
	{
		if (that == null)
			return false;

		boolean this_present_paramter = true && this.isSetParamter();
		boolean that_present_paramter = true && that.isSetParamter();
		if (this_present_paramter || that_present_paramter)
		{
			if (!(this_present_paramter && that_present_paramter))
				return false;
			if (!this.paramter.equals(that.paramter))
				return false;
		}

		boolean this_present_sys = true && this.isSetSys();
		boolean that_present_sys = true && that.isSetSys();
		if (this_present_sys || that_present_sys)
		{
			if (!(this_present_sys && that_present_sys))
				return false;
			if (!this.sys.equals(that.sys))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode()
	{
		return 0;
	}

	public int compareTo(RpcRequest other)
	{
		if (!getClass().equals(other.getClass()))
		{
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		RpcRequest typedOther = (RpcRequest) other;

		lastComparison = Boolean.valueOf(isSetParamter()).compareTo(typedOther.isSetParamter());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetParamter())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramter, typedOther.paramter);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSys()).compareTo(typedOther.isSetSys());
		if (lastComparison != 0)
		{
			return lastComparison;
		}
		if (isSetSys())
		{
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys, typedOther.sys);
			if (lastComparison != 0)
			{
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId)
	{
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
	{
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
	{
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder("RpcRequest(");
		boolean first = true;

		sb.append("paramter:");
		if (this.paramter == null)
		{
			sb.append("null");
		} else
		{
			sb.append(this.paramter);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sys:");
		if (this.sys == null)
		{
			sb.append("null");
		} else
		{
			sb.append(this.sys);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException
	{
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
	{
		try
		{
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException
	{
		try
		{
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te)
		{
			throw new java.io.IOException(te);
		}
	}

	private static class RpcRequestStandardSchemeFactory implements SchemeFactory
	{
		public RpcRequestStandardScheme getScheme()
		{
			return new RpcRequestStandardScheme();
		}
	}

	private static class RpcRequestStandardScheme extends StandardScheme<RpcRequest>
	{

		public void read(org.apache.thrift.protocol.TProtocol iprot, RpcRequest struct)
				throws org.apache.thrift.TException
		{
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
				{
					break;
				}
				switch (schemeField.id)
				{
				case 1: // PARAMTER
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP)
					{
						{
							org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
							struct.paramter = new HashMap<String, String>(2 * _map10.size);
							for (int _i11 = 0; _i11 < _map10.size; ++_i11)
							{
								String _key12; // required
								String _val13; // required
								_key12 = iprot.readString();
								_val13 = iprot.readString();
								struct.paramter.put(_key12, _val13);
							}
							iprot.readMapEnd();
						}
						struct.setParamterIsSet(true);
					} else
					{
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SYS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP)
					{
						{
							org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin();
							struct.sys = new HashMap<String, String>(2 * _map14.size);
							for (int _i15 = 0; _i15 < _map14.size; ++_i15)
							{
								String _key16; // required
								String _val17; // required
								_key16 = iprot.readString();
								_val17 = iprot.readString();
								struct.sys.put(_key16, _val17);
							}
							iprot.readMapEnd();
						}
						struct.setSysIsSet(true);
					} else
					{
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, RpcRequest struct)
				throws org.apache.thrift.TException
		{
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.paramter != null)
			{
				oprot.writeFieldBegin(PARAMTER_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.STRING, struct.paramter.size()));
					for (Map.Entry<String, String> _iter18 : struct.paramter.entrySet())
					{
						oprot.writeString(_iter18.getKey());
						oprot.writeString(_iter18.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.sys != null)
			{
				oprot.writeFieldBegin(SYS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.STRING, struct.sys.size()));
					for (Map.Entry<String, String> _iter19 : struct.sys.entrySet())
					{
						oprot.writeString(_iter19.getKey());
						oprot.writeString(_iter19.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class RpcRequestTupleSchemeFactory implements SchemeFactory
	{
		public RpcRequestTupleScheme getScheme()
		{
			return new RpcRequestTupleScheme();
		}
	}

	private static class RpcRequestTupleScheme extends TupleScheme<RpcRequest>
	{

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, RpcRequest struct)
				throws org.apache.thrift.TException
		{
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetParamter())
			{
				optionals.set(0);
			}
			if (struct.isSetSys())
			{
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetParamter())
			{
				{
					oprot.writeI32(struct.paramter.size());
					for (Map.Entry<String, String> _iter20 : struct.paramter.entrySet())
					{
						oprot.writeString(_iter20.getKey());
						oprot.writeString(_iter20.getValue());
					}
				}
			}
			if (struct.isSetSys())
			{
				{
					oprot.writeI32(struct.sys.size());
					for (Map.Entry<String, String> _iter21 : struct.sys.entrySet())
					{
						oprot.writeString(_iter21.getKey());
						oprot.writeString(_iter21.getValue());
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, RpcRequest struct)
				throws org.apache.thrift.TException
		{
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0))
			{
				{
					org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
							iprot.readI32());
					struct.paramter = new HashMap<String, String>(2 * _map22.size);
					for (int _i23 = 0; _i23 < _map22.size; ++_i23)
					{
						String _key24; // required
						String _val25; // required
						_key24 = iprot.readString();
						_val25 = iprot.readString();
						struct.paramter.put(_key24, _val25);
					}
				}
				struct.setParamterIsSet(true);
			}
			if (incoming.get(1))
			{
				{
					org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
							iprot.readI32());
					struct.sys = new HashMap<String, String>(2 * _map26.size);
					for (int _i27 = 0; _i27 < _map26.size; ++_i27)
					{
						String _key28; // required
						String _val29; // required
						_key28 = iprot.readString();
						_val29 = iprot.readString();
						struct.sys.put(_key28, _val29);
					}
				}
				struct.setSysIsSet(true);
			}
		}
	}

}
